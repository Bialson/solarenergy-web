/**
 * @fileoverview gRPC-Web generated client stub for solarservice
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: src/proto/energy.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as src_proto_energy_pb from '../../src/proto/energy_pb';


export class SolarServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetEnergyFromHomesByParams = new grpcWeb.MethodDescriptor(
    '/solarservice.SolarService/GetEnergyFromHomesByParams',
    grpcWeb.MethodType.SERVER_STREAMING,
    src_proto_energy_pb.PowerConsumptionRequest,
    src_proto_energy_pb.PowerFromHomes,
    (request: src_proto_energy_pb.PowerConsumptionRequest) => {
      return request.serializeBinary();
    },
    src_proto_energy_pb.PowerFromHomes.deserializeBinary
  );

  getEnergyFromHomesByParams(
    request: src_proto_energy_pb.PowerConsumptionRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<src_proto_energy_pb.PowerFromHomes> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/solarservice.SolarService/GetEnergyFromHomesByParams',
      request,
      metadata || {},
      this.methodDescriptorGetEnergyFromHomesByParams);
  }

  methodDescriptorGetEcoEnergyByParams = new grpcWeb.MethodDescriptor(
    '/solarservice.SolarService/GetEcoEnergyByParams',
    grpcWeb.MethodType.SERVER_STREAMING,
    src_proto_energy_pb.EcoEnergyRequest,
    src_proto_energy_pb.EcoEnergy,
    (request: src_proto_energy_pb.EcoEnergyRequest) => {
      return request.serializeBinary();
    },
    src_proto_energy_pb.EcoEnergy.deserializeBinary
  );

  getEcoEnergyByParams(
    request: src_proto_energy_pb.EcoEnergyRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<src_proto_energy_pb.EcoEnergy> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/solarservice.SolarService/GetEcoEnergyByParams',
      request,
      metadata || {},
      this.methodDescriptorGetEcoEnergyByParams);
  }

}

